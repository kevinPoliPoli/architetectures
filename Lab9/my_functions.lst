


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             convert_table, DATA, READONLY
    2 00000000         
    3 00000000         ;****************************************
    4 00000000         ; CHAR      HEX MORSE CODE BITS  ; -> 0x00000b10 .0 -1
    5 00000000         ;**************************************** 
    6 00000000         ;48 4F 4C 41 20 4D 55 4E 44 4F 20 31 32 : HOLA MUNDO 12
    7 00000000 41 31 30 
              00 00 00 
              02       morse_to_ascii__
                               DCB              65,  0x31, 0x30, 0x0, 0x0, 0x0,
 2 
                                                            ;A
    8 00000007 42 30 30 
              30 31 00 
              04               DCB              66,  0x30, 0x30, 0x30, 0x31, 0x
0, 4 
                                                            ;B
    9 0000000E 43 30 31 
              30 31 00 
              04               DCB              67, 0x30, 0x31, 0x30, 0x31, 0x0
,4 
                                                            ;C
   10 00000015 44 30 30 
              31 00 00 
              03               DCB              68,  0x30, 0x30, 0x31, 0x0, 0x0
 ,3 
                                                            ;D
   11 0000001C 45 30 00 
              00 00 00 
              01               DCB              69, 0x30, 0x0, 0x0, 0x0, 0x0, 1
 
                                                            ;E
   12 00000023 46 30 31 
              30 30 00 
              04               DCB              70, 0x30, 0x31, 0x30, 0x30, 0x0
,4 
                                                            ;F
   13 0000002A 47 31 31 
              30 00 00 
              03               DCB              71,  0x31, 0x31, 0x30, 0x0, 0x0
 ,3 
                                                            ;G
   14 00000031 48 30 30 
              30 30 00 
              04               DCB              72, 0x30, 0x30, 0x30, 0x30, 0x0
,4 
                                                            ;H
   15 00000038 49 30 30 
              00 00 00 
              02               DCB              73,  0x30, 0x30, 0x0, 0x0, 0x0,
 2 
                                                            ;I
   16 0000003F         ;
   17 0000003F 4A 31 31 
              31 30 00 
              03               DCB              74,  0x31, 0x31, 0x31, 0x30, 0x
0,3 
                                                            ;J
   18 00000046 4B 31 30 



ARM Macro Assembler    Page 2 


              31 00 00 
              03               DCB              75,  0x31, 0x30, 0x31, 0x0, 0x0
,3 
                                                            ;K
   19 0000004D 4C 30 30 
              31 30 00 
              04               DCB              76,  0x30, 0x30, 0x31, 0x30, 0x
0,4 
                                                            ;L
   20 00000054 4D 31 31 
              00 00 00 
              02               DCB              77,  0x31, 0x31, 0x0, 0x0, 0x0,
2 
                                                            ;M
   21 0000005B 4E 30 31 
              00 00 00 
              02               DCB              78, 0x30, 0x31, 0x0, 0x0, 0x0,2
 
                                                            ;N
   22 00000062 4F 31 31 
              31 00 00 
              03               DCB              79, 0x31, 0x31, 0x31, 0x0, 0x0,
3 
                                                            ;O
   23 00000069 50 30 31 
              31 30 00 
              03               DCB              80, 0x30, 0x31, 0x31, 0x30, 0x0
,3 
                                                            ;P
   24 00000070 51 31 30 
              31 31 00 
              04               DCB              81,  0x31, 0x30, 0x31, 0x31, 0x
0,4 
                                                            ;Q
   25 00000077 52 30 31 
              30 00 00 
              03               DCB              82, 0x30, 0x31, 0x30, 0x0, 0x0,
 3 
                                                            ;R
   26 0000007E         ;
   27 0000007E 53 30 30 
              30 00 00 
              03               DCB              83, 0x30, 0x30, 0x30, 0x0, 0x0,
 3 
                                                            ;S
   28 00000085 54 31 00 
              00 00 00 
              01               DCB              84, 0x31, 0x0, 0x0, 0x0, 0x0, 1
 
                                                            ;T
   29 0000008C 55 31 30 
              30 00 00 
              03               DCB              85,  0x31, 0x30, 0x30, 0x0, 0x0
 ,3 
                                                            ;U
   30 00000093 56 31 30 
              30 30 00 
              04               DCB              86, 0x31, 0x30, 0x30, 0x30, 0x0
 ,4 



ARM Macro Assembler    Page 3 


                                                            ;V
   31 0000009A 57 31 31 
              30 00 00 
              03               DCB              87, 0x31, 0x31, 0x30, 0x0, 0x0 
,3 
                                                            ;W
   32 000000A1 58 31 30 
              30 31 00 
              04               DCB              88,  0x31, 0x30, 0x30, 0x31, 0x
0,4 
                                                            ;X
   33 000000A8 59 31 31 
              30 31 00 
              04               DCB              89,  0x31, 0x31, 0x30, 0x31, 0x
0,4 
                                                            ;Y
   34 000000AF 5A 30 30 
              31 31 00 
              04               DCB              90,  0x30, 0x30, 0x31, 0x31, 0x
0,4 
                                                            ;X
   35 000000B6 30 31 31 
              31 31 30 
              05               DCB              48,  0x31, 0x31, 0x31, 0x31, 0x
30,5 
                                                            ;1
   36 000000BD         
   37 000000BD 31 31 31 
              31 30 30 
              05               DCB              49, 0x31, 0x31, 0x31, 0x30, 0x3
0,5 
                                                            ;2
   38 000000C4 32 31 31 
              30 30 30 
              05               DCB              50,  0x31, 0x31, 0x30, 0x30, 0x
30,5 
                                                            ;3
   39 000000CB 33 31 30 
              30 30 30 
              05               DCB              51,  0x31, 0x30, 0x30, 0x30, 0x
30,5 
                                                            ;4
   40 000000D2 34 30 30 
              30 30 30 
              05               DCB              52, 0x30, 0x30, 0x30, 0x30, 0x3
0,5 
                                                            ;5
   41 000000D9 35 30 30 
              30 30 31 
              05               DCB              53, 0x30, 0x30, 0x30, 0x30, 0x3
1,5 
                                                            ;6
   42 000000E0 36 30 30 
              30 31 31 
              05               DCB              54,  0x30, 0x30, 0x30, 0x31, 0x
31,5 
                                                            ;7
   43 000000E7 37 30 30 
              31 31 31 



ARM Macro Assembler    Page 4 


              05               DCB              55, 0x30, 0x30, 0x31, 0x31, 0x3
1,5 
                                                            ;8
   44 000000EE 38 30 31 
              31 31 31 
              05               DCB              56, 0x30, 0x31, 0x31, 0x31, 0x3
1,5 
                                                            ;9
   45 000000F5 39 31 31 
              31 31 31 
              05               DCB              57,  0x31, 0x31, 0x31, 0x31, 0x
31,5 
                                                            ;0
   46 000000FC         
   47 000000FC                 AREA             temporary_area, DATA, READWRITE
   48 00000000 00 00 00 
              00 00 00 
              00 00    temp    SPACE            8
   49 00000008         
   50 00000008                 AREA             my_functions, CODE, READONLY
   51 00000000                 EXPORT           translate_morse
   52 00000000         
   53 00000000         ;*******************************************************
                       **********************
   54 00000000         ;   PARAMETER    LOCATION   FOUND   USED       MOVED   
   55 00000000         ;*******************************************************
                       **********************
   56 00000000         ;char* vett_input    -> r0   Y  Y  
   57 00000000         ;int vet_input_lenght   -> r1    Y  N    
   58 00000000         ;char* vett_output    -> r2   N   Y  changed -> r1
   59 00000000         ;int vet_output_lenght   -> r3   Y  N
   60 00000000         ;char change_symbol   -> sp + 52  Y  Y
   61 00000000         ;char space     -> sp + 56  Y  Y
   62 00000000         ;char sentence_end    -> sp + 60  Y  Y
   63 00000000         ;*******************************************************
                       **********************/
   64 00000000         
   65 00000000         translate_morse
                               PROC
   66 00000000         
   67 00000000         ; save volatile registers
   68 00000000 E92D 4FFF       STMFD            sp!,{r0-r11,LR}
   69 00000004         
   70 00000004         ;resort/reset registers 
   71 00000004 4611            mov              r1, r2
   72 00000006 F04F 0800       mov              r8, #0
   73 0000000A F04F 0900       mov              r9, #0
   74 0000000E F04F 0A00       mov              r10, #0
   75 00000012 F04F 0B00       mov              r11, #0
   76 00000016 F04F 0C00       mov              r12, #0
   77 0000001A         
   78 0000001A 4A3E            ldr              r2, =temp   ;temporary variable
                                                             location
   79 0000001C F04F 0A0C       mov              r10, #12
   80 00000020         
   81 00000020         ;define length of output array ?? 
   82 00000020         
   83 00000020         ;r0  input vector mempry location
   84 00000020         ;r1  output vector memory location 



ARM Macro Assembler    Page 5 


   85 00000020         ;r2  contains labels (addresses) when required
   86 00000020         ;r3  d
   87 00000020         ;r4  d
   88 00000020         ;r5  d
   89 00000020         ;r6  to count how many 4 bytes have been wrote
   90 00000020         ;r7  keep trace of the space
   91 00000020         ;r8  contains the end_message, space and end_symbol char
                       acters
   92 00000020         ;r9  contains the unconverted and converted value
   93 00000020         ;r10 
   94 00000020         ;r11 contains the total numeber of read symbols
   95 00000020         ;r12 contains the number of read bytes
   96 00000020         
   97 00000020         
   98 00000020         read                                 ;0x100001D0
   99 00000020 F890 9000       ldrb             r9, [r0]    ;check the value of
                                                             the the i-th eleme
                                                            nt of the message
  100 00000024         
  101 00000024 F89D 8034       ldrb             r8, [sp, #52] ;check if symbol 
                                                            end
  102 00000028 45C1            cmp              r9, r8
  103 0000002A D01D            beq              found2
  104 0000002C         
  105 0000002C F89D 8038       ldrb             r8, [sp, #56] ;check if space
  106 00000030 45C1            cmp              r9, r8
  107 00000032 D031            beq              found3
  108 00000034         
  109 00000034 F89D 803C       ldrb             r8, [sp, #60] ;check if end of 
                                                            the message
  110 00000038 45C1            cmp              r9, r8
  111 0000003A D030            beq              found4
  112 0000003C         
  113 0000003C F1BC 0F04       cmp              r12, #4
  114 00000040         ;<=4
  115 00000040 BFDF F8D2 
              A000             ldrle            r10, [r2]   ;0x2007C000
  116 00000046 EA4F 2A0A       lslle            r10, r10, #8
  117 0000004A F8C2 A000       strle            r10, [r2]
  118 0000004E F882 9000       strble           r9, [r2]    ;store into tempora
                                                            ry variable
  119 00000052         
  120 00000052         ;>4
  121 00000052 BFC2 3204       addgt            r2, #4      ;write in the next 
                                                            word of the temp va
                                                            riable
  122 00000056 EA4F 6909       lslgt            r9, #24
  123 0000005A F8C2 9000       strgt            r9, [r2]
  124 0000005E         
  125 0000005E         ;common
  126 0000005E F100 0001       add              r0, r0, #1  ;read next byte of 
                                                            the input array
  127 00000062 F10C 0C01       add              r12, r12, #1 ;increment number 
                                                            of read bytes
  128 00000066         
  129 00000066 E7DB            b                read
  130 00000068         
  131 00000068         found2                               ;push
  132 00000068 F7FF FFFE       bl               search_and_convert



ARM Macro Assembler    Page 6 


  133 0000006C         ;pop
  134 0000006C         
  135 0000006C         ;increment number of read symbols
  136 0000006C F10B 0B01       add              r11, r11, #1
  137 00000070         
  138 00000070         ;reset temp value
  139 00000070 4A28            ldr              r2, =temp
  140 00000072 F04F 0300       mov              r3, #0
  141 00000076 6013            str              r3, [r2]
  142 00000078 F102 0204       add              r2, r2, #4
  143 0000007C 6013            str              r3, [r2]
  144 0000007E 4A25            ldr              r2, =temp
  145 00000080         
  146 00000080 F100 0001       add              r0, r0, #1  ;read next byte of 
                                                            the input array
  147 00000084 F101 0101       add              r1, r1, #1  ;next output positi
                                                            on
  148 00000088         
  149 00000088 F04F 0C00       mov              r12, #0     ;reset byte counter
                                                            
  150 0000008C F10B 0B01       add              r11, r11, #1 ;count two symbols
                                                             (symbol + space)
  151 00000090         
  152 00000090         ;add r6, r6, #1
  153 00000090         ;cmp r6, #4 ;check if read 4 symbols
  154 00000090         ;moveq r6, #0 ;reset counter
  155 00000090         ;addeq r1, r1, #4
  156 00000090         
  157 00000090 2F01            cmp              r7, #1
  158 00000092 BF08 2700       moveq            r7, #0
  159 00000096         
  160 00000096 E7C3            b                read
  161 00000098         
  162 00000098         found3                               ;save into oputput 
                                                            vector value + spac
                                                            e r10
  163 00000098 F04F 0701       mov              r7, #1      ;save the informati
                                                            on about the space
  164 0000009C E7E4            b                found2
  165 0000009E         
  166 0000009E         
  167 0000009E         found4                               ;push
  168 0000009E F7FF FFFE       BL               search_and_convert ;search and 
                                                            convert the morse c
                                                            ode to ascii
  169 000000A2         ;pop
  170 000000A2 F10B 0B01       add              r11, r11, #1 ;count last symbol
                                                            
  171 000000A6 4658            mov              r0, r11     ;return the total n
                                                            umber of converted 
                                                            words into r0
  172 000000A8 E8BD 87FE       LDMFD            sp!,{r1-r10,PC} ; restore volat
                                                            ile registers
  173 000000AC         
  174 000000AC                 ENDP
  175 000000AC         
  176 000000AC         
  177 000000AC         search_and_convert
                               PROC



ARM Macro Assembler    Page 7 


  178 000000AC         ; save volatile registers
  179 000000AC E92D 4FFF       STMFD            sp!,{r0-r11,LR}
  180 000000B0         
  181 000000B0 4C18            ldr              r4, =temp
  182 000000B2 4A19            ldr              r2, =morse_to_ascii__ ;dictiona
                                                            ry: value: ascii va
                                                            lue -  key: byte ra
                                                            presentation ;0x000
                                                            00AE4 
  183 000000B4 F102 0201       add              r2, r2, #1  ; byte 2 (word)
  184 000000B8         
  185 000000B8         
  186 000000B8 F04F 0B00 
                       loop    mov              r11, #0     ;count the number o
                                                            f correct compared 
                                                            bytes
  187 000000BC         
  188 000000BC         ;iterate over entries of the table
  189 000000BC 7956    pre_loop
                               ldrb             r6, [r2, #5] ;length of the ent
                                                            ry
  190 000000BE         
  191 000000BE         ;iterate over temporary variable's bytes
  192 000000BE 7820    inner_loop
                               ldrb             r0, [r4]    ;temporary variable
                                                            
  193 000000C0 7813            ldrb             r3, [r2]    ;first byte of the 
                                                            translation
  194 000000C2         
  195 000000C2 4566            cmp              r6, r12     ; length of the ent
                                                            ry is equal to leng
                                                            th of read symbols?
                                                            
  196 000000C4 D114            bne              next_entry
  197 000000C6         
  198 000000C6 45B3            cmp              r11, r6     ;finish to read? 
  199 000000C8 D007            beq              store
  200 000000CA         
  201 000000CA 4298            cmp              r0, r3      ;byte to byte compa
                                                            rison
  202 000000CC D110            bne              next_entry
  203 000000CE BF02 1C52       addeq            r2, r2, #1  ;read next byte ent
                                                            ry
  204 000000D2 1C64            addeq            r4, r4, #1  ;read next byte tem
                                                            porary variable
  205 000000D4 F10B 0B01       addeq            r11, r11, #1 ;increment the num
                                                            ber of equal bytes
  206 000000D8 D0F1            beq              inner_loop
  207 000000DA         
  208 000000DA         
  209 000000DA BF01 EBA2 
              020B     store   subeq            r2, r2, r11 ;point to the head 
                                                            of the entry (adjus
                                                            t the pointer)
  210 000000E0 1ED2            subeq            r2, r2, #3  ;point to the head 
                                                            of the entry (adjus
                                                            t the pointer)
  211 000000E2 7814            ldrbeq           r4, [r2]    ;retireve the value
                                                             of the entry (conv



ARM Macro Assembler    Page 8 


                                                            erted value)
  212 000000E4 680D            ldreq            r5, [r1]    ;take the last byte
                                                             of the output arra
                                                            y
  213 000000E6 BF02 0A2D       lsreq            r5, r5, #8  ; make space for th
                                                            e next sybol value
  214 000000EA 600D            streq            r5, [r1]    ; save prev values
  215 000000EC 700C            strbeq           r4, [r1]    ;save into output a
                                                            rray
  216 000000EE D005            beq              exit        ;finish
  217 000000F0         
  218 000000F0         
  219 000000F0         next_entry                           ;read next entry of
                                                             the dictionary
  220 000000F0 EBA2 020B       sub              r2, r2, r11 ;point to the head 
                                                            of the entry
  221 000000F4 F102 0207       add              r2, r2, #7  ;next entry of the 
                                                            dictionary
  222 000000F8 4C06            ldr              r4, =temp   ;read again the tem
                                                            porary register
  223 000000FA D1DD            bne              loop
  224 000000FC         
  225 000000FC         
  226 000000FC         exit                                 ;found space?
  227 000000FC 2F01            cmp              r7, #1
  228 000000FE BF01 2720       moveq            r7, #0x20
  229 00000102 680D            ldreq            r5, [r1]    ;take the last byte
                                                             of the output arra
                                                            y
  230 00000104 0A2D            lsreq            r5, r5, #8  ; make space for th
                                                            e next sybol value
  231 00000106 600D            streq            r5, [r1]    ; save
  232 00000108 BF08 700F       strbeq           r7, [r1]    ;save into output a
                                                            rray
  233 0000010C F04F 0700       mov              r7, #0
  234 00000110         
  235 00000110         ;restore volatile registers
  236 00000110 E8BD 8FFF       LDMFD            sp!,{r0-r11,PC}
  237 00000114                 ENDP
  238 00000114         
  239 00000114                 END
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\my_functions.d -o.\my_functions.o -I.\RTE\_Target_1 -IC:\Users\K
evin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Kevi
n\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.7.1\Device\Include --predefine="__
EVAL SETA 1" --predefine="__UVISION_VERSION SETA 537" --predefine="_RTE_ SETA 1
" --predefine="LPC175x_6x SETA 1" --predefine="_RTE_ SETA 1" --list=.\my_functi
ons.lst my_functions.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

convert_table 00000000

Symbol: convert_table
   Definitions
      At line 1 in file my_functions.s
   Uses
      None
Comment: convert_table unused
morse_to_ascii__ 00000000

Symbol: morse_to_ascii__
   Definitions
      At line 7 in file my_functions.s
   Uses
      At line 182 in file my_functions.s
Comment: morse_to_ascii__ used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

temp 00000000

Symbol: temp
   Definitions
      At line 48 in file my_functions.s
   Uses
      At line 78 in file my_functions.s
      At line 139 in file my_functions.s
      At line 144 in file my_functions.s
      At line 181 in file my_functions.s
      At line 222 in file my_functions.s

temporary_area 00000000

Symbol: temporary_area
   Definitions
      At line 47 in file my_functions.s
   Uses
      None
Comment: temporary_area unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

exit 000000FC

Symbol: exit
   Definitions
      At line 226 in file my_functions.s
   Uses
      At line 216 in file my_functions.s
Comment: exit used once
found2 00000068

Symbol: found2
   Definitions
      At line 131 in file my_functions.s
   Uses
      At line 103 in file my_functions.s
      At line 164 in file my_functions.s

found3 00000098

Symbol: found3
   Definitions
      At line 162 in file my_functions.s
   Uses
      At line 107 in file my_functions.s
Comment: found3 used once
found4 0000009E

Symbol: found4
   Definitions
      At line 167 in file my_functions.s
   Uses
      At line 111 in file my_functions.s
Comment: found4 used once
inner_loop 000000BE

Symbol: inner_loop
   Definitions
      At line 192 in file my_functions.s
   Uses
      At line 206 in file my_functions.s
Comment: inner_loop used once
loop 000000B8

Symbol: loop
   Definitions
      At line 186 in file my_functions.s
   Uses
      At line 223 in file my_functions.s
Comment: loop used once
my_functions 00000000

Symbol: my_functions
   Definitions
      At line 50 in file my_functions.s
   Uses
      None
Comment: my_functions unused
next_entry 000000F0




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: next_entry
   Definitions
      At line 219 in file my_functions.s
   Uses
      At line 196 in file my_functions.s
      At line 202 in file my_functions.s

pre_loop 000000BC

Symbol: pre_loop
   Definitions
      At line 189 in file my_functions.s
   Uses
      None
Comment: pre_loop unused
read 00000020

Symbol: read
   Definitions
      At line 98 in file my_functions.s
   Uses
      At line 129 in file my_functions.s
      At line 160 in file my_functions.s

search_and_convert 000000AC

Symbol: search_and_convert
   Definitions
      At line 177 in file my_functions.s
   Uses
      At line 132 in file my_functions.s
      At line 168 in file my_functions.s

store 000000DA

Symbol: store
   Definitions
      At line 209 in file my_functions.s
   Uses
      At line 199 in file my_functions.s
Comment: store used once
translate_morse 00000000

Symbol: translate_morse
   Definitions
      At line 65 in file my_functions.s
   Uses
      At line 51 in file my_functions.s
Comment: translate_morse used once
13 symbols
353 symbols in table
