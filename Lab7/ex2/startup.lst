


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ********************//**
    2 00000000         ; * @file     startup_LPC17xx.s
    3 00000000         ; * @brief    CMSIS Cortex-M3 Core Device Startup File f
                       or
    4 00000000         ; *           NXP LPC17xx Device Series
    5 00000000         ; * @version  V1.10
    6 00000000         ; * @date     06. April 2011
    7 00000000         ; *
    8 00000000         ; * @note
    9 00000000         ; * Copyright (C) 2009-2011 ARM Limited. All rights rese
                       rved.
   10 00000000         ; *
   11 00000000         ; * @par
   12 00000000         ; * ARM Limited (ARM) is supplying this software for use
                        with Cortex-M
   13 00000000         ; * processor based microcontrollers.  This file can be 
                       freely distributed
   14 00000000         ; * within development tools that are supporting such AR
                       M based processors.
   15 00000000         ; *
   16 00000000         ; * @par
   17 00000000         ; * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, W
                       HETHER EXPRESS, IMPLIED
   18 00000000         ; * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED
                        WARRANTIES OF
   19 00000000         ; * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
                        APPLY TO THIS SOFTWARE.
   20 00000000         ; * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR S
                       PECIAL, INCIDENTAL, OR
   21 00000000         ; * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   22 00000000         ; *
   23 00000000         ; ******************************************************
                       ************************/
   24 00000000         
   25 00000000         ; *------- <<< Use Configuration Wizard in Context Menu 
                       >>> ------------------
   26 00000000         
   27 00000000         ; <h> Stack Configuration
   28 00000000         ;   <o> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
   29 00000000         ; </h>
   30 00000000         
   31 00000000 00000200 
                       Stack_Size
                               EQU              0x00000200
   32 00000000         
   33 00000000                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3
   34 00000000         Stack_Mem
                               SPACE            Stack_Size
   35 00000200         __initial_sp
   36 00000200         
   37 00000200         
   38 00000200         ; <h> Heap Configuration
   39 00000200         ;   <o>  Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
   40 00000200         ; </h>
   41 00000200         
   42 00000200 00000200 
                       Heap_Size



ARM Macro Assembler    Page 2 


                               EQU              0x00000200
   43 00000200         
   44 00000200                 AREA             HEAP, NOINIT, READWRITE, ALIGN=
3 
                                                            ; 2*3
   45 00000000         __heap_base
   46 00000000         Heap_Mem
                               SPACE            Heap_Size
   47 00000200         __heap_limit
   48 00000200         
   49 00000200         
   50 00000200                 PRESERVE8
   51 00000200                 THUMB
   52 00000200         
   53 00000200         
   54 00000200         ; Vector Table Mapped to Address 0 at Reset
   55 00000200         
   56 00000200                 AREA             RESET, DATA, READONLY
   57 00000000                 EXPORT           __Vectors
   58 00000000         
   59 00000000 00000000 
                       __Vectors
                               DCD              __initial_sp ; Top of Stack
   60 00000004 00000000        DCD              Reset_Handler ; Reset Handler
   61 00000008 00000000        DCD              NMI_Handler ; NMI Handler
   62 0000000C 00000000        DCD              HardFault_Handler ; Hard Fault 
                                                            Handler
   63 00000010 00000000        DCD              MemManage_Handler 
                                                            ; MPU Fault Handler
                                                            
   64 00000014 00000000        DCD              BusFault_Handler 
                                                            ; Bus Fault Handler
                                                            
   65 00000018 00000000        DCD              UsageFault_Handler ; Usage Faul
                                                            t Handler
   66 0000001C 00000000        DCD              0           ; Reserved
   67 00000020 00000000        DCD              0           ; Reserved
   68 00000024 00000000        DCD              0           ; Reserved
   69 00000028 00000000        DCD              0           ; Reserved
   70 0000002C 00000000        DCD              SVC_Handler ; SVCall Handler
   71 00000030 00000000        DCD              DebugMon_Handler ; Debug Monito
                                                            r Handler
   72 00000034 00000000        DCD              0           ; Reserved
   73 00000038 00000000        DCD              PendSV_Handler ; PendSV Handler
                                                            
   74 0000003C 00000000        DCD              SysTick_Handler 
                                                            ; SysTick Handler
   75 00000040         
   76 00000040         ; External Interrupts
   77 00000040 00000000        DCD              WDT_IRQHandler ; 16: Watchdog T
                                                            imer
   78 00000044 00000000        DCD              TIMER0_IRQHandler ; 17: Timer0
   79 00000048 00000000        DCD              TIMER1_IRQHandler ; 18: Timer1
   80 0000004C 00000000        DCD              TIMER2_IRQHandler ; 19: Timer2
   81 00000050 00000000        DCD              TIMER3_IRQHandler ; 20: Timer3
   82 00000054 00000000        DCD              UART0_IRQHandler ; 21: UART0
   83 00000058 00000000        DCD              UART1_IRQHandler ; 22: UART1
   84 0000005C 00000000        DCD              UART2_IRQHandler ; 23: UART2
   85 00000060 00000000        DCD              UART3_IRQHandler ; 24: UART3



ARM Macro Assembler    Page 3 


   86 00000064 00000000        DCD              PWM1_IRQHandler ; 25: PWM1
   87 00000068 00000000        DCD              I2C0_IRQHandler ; 26: I2C0
   88 0000006C 00000000        DCD              I2C1_IRQHandler ; 27: I2C1
   89 00000070 00000000        DCD              I2C2_IRQHandler ; 28: I2C2
   90 00000074 00000000        DCD              SPI_IRQHandler ; 29: SPI
   91 00000078 00000000        DCD              SSP0_IRQHandler ; 30: SSP0
   92 0000007C 00000000        DCD              SSP1_IRQHandler ; 31: SSP1
   93 00000080 00000000        DCD              PLL0_IRQHandler ; 32: PLL0 Lock
                                                             (Main PLL)
   94 00000084 00000000        DCD              RTC_IRQHandler ; 33: Real Time 
                                                            Clock
   95 00000088 00000000        DCD              EINT0_IRQHandler ; 34: External
                                                             Interrupt 0
   96 0000008C 00000000        DCD              EINT1_IRQHandler ; 35: External
                                                             Interrupt 1
   97 00000090 00000000        DCD              EINT2_IRQHandler ; 36: External
                                                             Interrupt 2
   98 00000094 00000000        DCD              EINT3_IRQHandler ; 37: External
                                                             Interrupt 3
   99 00000098 00000000        DCD              ADC_IRQHandler 
                                                            ; 38: A/D Converter
                                                            
  100 0000009C 00000000        DCD              BOD_IRQHandler ; 39: Brown-Out 
                                                            Detect
  101 000000A0 00000000        DCD              USB_IRQHandler ; 40: USB
  102 000000A4 00000000        DCD              CAN_IRQHandler ; 41: CAN
  103 000000A8 00000000        DCD              DMA_IRQHandler ; 42: General Pu
                                                            rpose DMA
  104 000000AC 00000000        DCD              I2S_IRQHandler ; 43: I2S
  105 000000B0 00000000        DCD              ENET_IRQHandler ; 44: Ethernet
  106 000000B4 00000000        DCD              RIT_IRQHandler ; 45: Repetitive
                                                             Interrupt Timer
  107 000000B8 00000000        DCD              MCPWM_IRQHandler ; 46: Motor Co
                                                            ntrol PWM
  108 000000BC 00000000        DCD              QEI_IRQHandler ; 47: Quadrature
                                                             Encoder Interface
  109 000000C0 00000000        DCD              PLL1_IRQHandler ; 48: PLL1 Lock
                                                             (USB PLL)
  110 000000C4 00000000        DCD              USBActivity_IRQHandler ; 49: US
                                                            B Activity interrup
                                                            t to wakeup
  111 000000C8 00000000        DCD              CANActivity_IRQHandler ; 50: CA
                                                            N Activity interrup
                                                            t to wakeup
  112 000000CC         
  113 000000CC         
  114 000000CC                 IF               :LNOT::DEF:NO_CRP
  115 000000CC                 AREA             |.ARM.__at_0x02FC|, CODE, READO
NLY
  116 00000000 FFFFFFFF 
                       CRP_Key DCD              0xFFFFFFFF
  117 00000004                 ENDIF
  118 00000004         
  119 00000004                 AREA             static_data, DATA, READONLY, AL
IGN=3
  120 00000000 00000001 
              0000001E 
              00000002 
              00000046 



ARM Macro Assembler    Page 4 


              00000003 
              000000C8 
              00000004 
              0000002A 
              00000005 
              00000051 Ingredient_calories_original
                               DCD              0x01, 30, 0x02, 70, 0x03, 200, 
0x04, 42, 0x05, 81
  121 00000028 00000006 
              00000014         DCD              0x06, 20
  122 00000030         
  123 00000030 00000002 
              00000032 
              00000005 
              00000003 
              00000003 
              0000000A 
              00000001 
              00000005 
              00000004 Ingredient_quantity_original
                               DCD              0x02, 50, 0x05, 3, 0x03, 10, 0x
01, 5, 0x04
  124 00000054 00000008 
              00000006 
              0000001E         DCD              8, 0x06, 30
  125 00000060         
  126 00000060 06      Num_ingredients
                               DCB              6
  127 00000061         
  128 00000061                 AREA             dynamic_data, DATA, READWRITE, 
ALIGN=3
  129 00000000         
  130 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 Ingredient_calories
                               SPACE            48
  131 00000030         
  132 00000030 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 5 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 Ingredient_quantity
                               SPACE            48
  133 00000060         
  134 00000060 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 Calories_ordered
                               SPACE            24
  135 00000078         
  136 00000078 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 Quantity_ordered
                               SPACE            24
  137 00000090         
  138 00000090 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 Most_caloric_array
                               SPACE            48
  139 000000C0         
  140 000000C0         
  141 000000C0         ; Reset Handler
  142 000000C0                 AREA             |.text|, CODE, READONLY
  143 00000000         
  144 00000000         Reset_Handler
                               PROC
  145 00000000                 EXPORT           Reset_Handler             [WEAK
]
  146 00000000         
  147 00000000         ;--------------------- DUPLICATE ARARYS ----------------
                       -----
  148 00000000 48D5            ldr              r0, =Ingredient_calories_origin



ARM Macro Assembler    Page 6 


al
  149 00000002 49D6            ldr              r1, =Ingredient_calories
  150 00000004         
  151 00000004 E9D0 2300       ldrd             r2, r3, [r0]
  152 00000008 E9C1 2300       strd             r2, r3, [r1]
  153 0000000C F100 0008       add              r0, #8
  154 00000010 F101 0108       add              r1, #8
  155 00000014 E9D0 2300       ldrd             r2, r3, [r0]
  156 00000018 E9C1 2300       strd             r2, r3, [r1]
  157 0000001C F100 0008       add              r0, #8
  158 00000020 F101 0108       add              r1, #8
  159 00000024 E9D0 2300       ldrd             r2, r3, [r0]
  160 00000028 E9C1 2300       strd             r2, r3, [r1]
  161 0000002C F100 0008       add              r0, #8
  162 00000030 F101 0108       add              r1, #8
  163 00000034 E9D0 2300       ldrd             r2, r3, [r0]
  164 00000038 E9C1 2300       strd             r2, r3, [r1]
  165 0000003C F100 0008       add              r0, #8
  166 00000040 F101 0108       add              r1, #8
  167 00000044 E9D0 2300       ldrd             r2, r3, [r0]
  168 00000048 E9C1 2300       strd             r2, r3, [r1]
  169 0000004C F100 0008       add              r0, #8
  170 00000050 F101 0108       add              r1, #8
  171 00000054 E9D0 2300       ldrd             r2, r3, [r0]
  172 00000058 E9C1 2300       strd             r2, r3, [r1]
  173 0000005C F100 0008       add              r0, #8
  174 00000060 F101 0108       add              r1, #8
  175 00000064         
  176 00000064 F04F 0000       mov              r0, #0x0
  177 00000068 F04F 0100       mov              r1, #0x0
  178 0000006C F04F 0200       mov              r2, #0x0
  179 00000070 F04F 0300       mov              r3, #0x0
  180 00000074         
  181 00000074         ;--------------------- REGISTER INITIALIZZATION --------
                       -------------
  182 00000074         
  183 00000074         ;obtain the maximum size of the array
  184 00000074 48BA            LDR              r0, =Num_ingredients
  185 00000076 F890 C000       ldrb             r12, [r0]
  186 0000007A F04F 0000       mov              r0, #0x0
  187 0000007E         
  188 0000007E 49B7            LDR              r1, =Ingredient_calories ;point
                                                            er to the first ele
                                                            ment of the window
  189 00000080 F101 0208       add              r2, r1, #8  ;pointer to the sec
                                                            ond element of the 
                                                            window
  190 00000084         
  191 00000084         ;r3 temp label 
  192 00000084         ;r4 temp value
  193 00000084         
  194 00000084         ;r5 reserved
  195 00000084         ;r6 reserved
  196 00000084         ;r7 reserved
  197 00000084         ;r8 reserved
  198 00000084         
  199 00000084 F04F 0B06       mov              r11, #0x6   ;exit condition
  200 00000088 F04F 0C00       mov              r12, #0x0   ;swap counter
  201 0000008C 4658            mov              r0, r11     ;maximum swap per i



ARM Macro Assembler    Page 7 


                                                            teration
  202 0000008E         
  203 0000008E         
  204 0000008E         restart_cal                          ;how many swaps at 
                                                            this iteration?
  205 0000008E F1A0 0001       sub              r0, r0, #1
  206 00000092         
  207 00000092         ;exit contition
  208 00000092 2800            cmp              r0, #0
  209 00000094 D01E            beq              save_array_cal
  210 00000096         
  211 00000096         ;point to the start of the array again
  212 00000096 49B1            LDR              r1, =Ingredient_calories
  213 00000098 F101 0208       add              r2, r1, #8
  214 0000009C         
  215 0000009C         ;reset swap counter
  216 0000009C F04F 0C00       mov              r12, #0x0
  217 000000A0         
  218 000000A0         
  219 000000A0         continue_cal                         ;BUBBLE SORT IMPLEM
                                                            ENTATION
  220 000000A0         
  221 000000A0         ;--------------------- START SWAP ---------------------
  222 000000A0         ;take the i-th and the i+1-th elements
  223 000000A0 E9D1 5600       ldrd             r5, r6, [r1]
  224 000000A4 E9D2 7800       ldrd             r7, r8, [r2]
  225 000000A8         
  226 000000A8         ;check if maximum
  227 000000A8 4546            cmp              r6, r8
  228 000000AA         
  229 000000AA         ;r6 < r8 -> N=1 -> swap
  230 000000AA         ;save first item of the window in a temporary register
  231 000000AA BF41 462B       movmi            r3, r5
  232 000000AE 4634            movmi            r4, r6
  233 000000B0         ;save second item in the first
  234 000000B0 463D            movmi            r5, r7
  235 000000B2 4646            movmi            r6, r8
  236 000000B4         ;restore the first item
  237 000000B4 BF44 461F       movmi            r7, r3
  238 000000B8 46A0            movmi            r8, r4
  239 000000BA         
  240 000000BA         ;update the array
  241 000000BA E9C1 5600       strd             r5, r6, [r1]
  242 000000BE E9C2 7800       strd             r7, r8, [r2]
  243 000000C2         
  244 000000C2         ;--------------------- RESTART CONDITION ---------------
                       ------
  245 000000C2         ;update restart_counter
  246 000000C2 F10C 0C01       add              r12, #1
  247 000000C6         ;check if restart
  248 000000C6 4584            cmp              r12, r0
  249 000000C8         ;yes -> restart
  250 000000C8 D0E1            beq              restart_cal
  251 000000CA         ;no -> update window
  252 000000CA F101 0108       add              r1, r1, #8
  253 000000CE F102 0208       add              r2, r2, #8
  254 000000D2 D1E5            bne              continue_cal
  255 000000D4         
  256 000000D4 48A3    save_array_cal



ARM Macro Assembler    Page 8 


                               ldr              r0, =Calories_ordered
  257 000000D6 49A1            ldr              r1, =Ingredient_calories
  258 000000D8 780A            ldrb             r2, [r1]
  259 000000DA 7002            strb             r2, [r0]
  260 000000DC F811 2F08       ldrb             r2, [r1, #8]!
  261 000000E0 F800 2F04       strb             r2, [r0, #4]!
  262 000000E4 F811 2F08       ldrb             r2, [r1, #8]!
  263 000000E8 F800 2F04       strb             r2, [r0, #4]!
  264 000000EC F811 2F08       ldrb             r2, [r1, #8]!
  265 000000F0 F800 2F04       strb             r2, [r0, #4]!
  266 000000F4 F811 2F08       ldrb             r2, [r1, #8]!
  267 000000F8 F800 2F04       strb             r2, [r0, #4]!
  268 000000FC F811 2F08       ldrb             r2, [r1, #8]!
  269 00000100 F800 2F04       strb             r2, [r0, #4]!
  270 00000104         
  271 00000104 E7FF            b                next_step
  272 00000106         
  273 00000106 4898    next_step
                               ldr              r0, =Ingredient_quantity_origin
al
  274 00000108 4998            ldr              r1, =Ingredient_quantity
  275 0000010A         
  276 0000010A E9D0 2300       ldrd             r2, r3, [r0]
  277 0000010E E9C1 2300       strd             r2, r3, [r1]
  278 00000112 F100 0008       add              r0, #8
  279 00000116 F101 0108       add              r1, #8
  280 0000011A E9D0 2300       ldrd             r2, r3, [r0]
  281 0000011E E9C1 2300       strd             r2, r3, [r1]
  282 00000122 F100 0008       add              r0, #8
  283 00000126 F101 0108       add              r1, #8
  284 0000012A E9D0 2300       ldrd             r2, r3, [r0]
  285 0000012E E9C1 2300       strd             r2, r3, [r1]
  286 00000132 F100 0008       add              r0, #8
  287 00000136 F101 0108       add              r1, #8
  288 0000013A E9D0 2300       ldrd             r2, r3, [r0]
  289 0000013E E9C1 2300       strd             r2, r3, [r1]
  290 00000142 F100 0008       add              r0, #8
  291 00000146 F101 0108       add              r1, #8
  292 0000014A E9D0 2300       ldrd             r2, r3, [r0]
  293 0000014E E9C1 2300       strd             r2, r3, [r1]
  294 00000152 F100 0008       add              r0, #8
  295 00000156 F101 0108       add              r1, #8
  296 0000015A E9D0 2300       ldrd             r2, r3, [r0]
  297 0000015E E9C1 2300       strd             r2, r3, [r1]
  298 00000162 F100 0008       add              r0, #8
  299 00000166 F101 0108       add              r1, #8
  300 0000016A         
  301 0000016A F04F 0000       mov              r0, #0x0
  302 0000016E F04F 0100       mov              r1, #0x0
  303 00000172 F04F 0200       mov              r2, #0x0
  304 00000176 F04F 0300       mov              r3, #0x0
  305 0000017A F04F 0400       mov              r4, #0x0
  306 0000017E F04F 0500       mov              r5, #0x0
  307 00000182 F04F 0600       mov              r6, #0x0
  308 00000186 F04F 0700       mov              r7, #0x0
  309 0000018A F04F 0800       mov              r8, #0x0
  310 0000018E F04F 0900       mov              r9, #0x0
  311 00000192 F04F 0A00       mov              r10, #0x0
  312 00000196 F04F 0B00       mov              r11, #0x0



ARM Macro Assembler    Page 9 


  313 0000019A F04F 0C00       mov              r12, #0x0
  314 0000019E         
  315 0000019E         ;--------------------- REGISTER INITIALIZZATION --------
                       -------------
  316 0000019E         
  317 0000019E         ;obtain the maximum size of the array
  318 0000019E 4870            LDR              r0, =Num_ingredients
  319 000001A0 F890 C000       ldrb             r12, [r0]
  320 000001A4 F04F 0000       mov              r0, #0x0
  321 000001A8         
  322 000001A8 4970            LDR              r1, =Ingredient_quantity ;point
                                                            er to the first ele
                                                            ment of the window
  323 000001AA F101 0208       add              r2, r1, #8  ;pointer to the sec
                                                            ond element of the 
                                                            window
  324 000001AE         
  325 000001AE         ;r3 temp label 
  326 000001AE         ;r4 temp value
  327 000001AE         
  328 000001AE         ;r5 reserved
  329 000001AE         ;r6 reserved
  330 000001AE         ;r7 reserved
  331 000001AE         ;r8 reserved
  332 000001AE         
  333 000001AE F04F 0B06       mov              r11, #0x6   ;exit condition
  334 000001B2 F04F 0C00       mov              r12, #0x0   ;swap counter
  335 000001B6 4658            mov              r0, r11     ;maximum swap per i
                                                            teration
  336 000001B8         
  337 000001B8         
  338 000001B8         restart_qua                          ;how many swaps at 
                                                            this iteration?
  339 000001B8 F1A0 0001       sub              r0, r0, #1
  340 000001BC         
  341 000001BC         ;exit contition
  342 000001BC 2800            cmp              r0, #0
  343 000001BE D01E            beq              save_array_qua
  344 000001C0         
  345 000001C0         ;point to the start of the array again
  346 000001C0 496A            LDR              r1, =Ingredient_quantity
  347 000001C2 F101 0208       add              r2, r1, #8
  348 000001C6         
  349 000001C6         ;reset swap counter
  350 000001C6 F04F 0C00       mov              r12, #0x0
  351 000001CA         
  352 000001CA         
  353 000001CA         continue_qua                         ;BUBBLE SORT IMPLEM
                                                            ENTATION
  354 000001CA         
  355 000001CA         ;--------------------- START SWAP ---------------------
  356 000001CA         ;take the i-th and the i+1-th elements
  357 000001CA E9D1 5600       ldrd             r5, r6, [r1]
  358 000001CE E9D2 7800       ldrd             r7, r8, [r2]
  359 000001D2         
  360 000001D2         ;check if maximum
  361 000001D2 4546            cmp              r6, r8
  362 000001D4         
  363 000001D4         ;r6 < r8 -> N=1 -> swap



ARM Macro Assembler    Page 10 


  364 000001D4         ;save first item of the window in a temporary register
  365 000001D4 BF41 462B       movmi            r3, r5
  366 000001D8 4634            movmi            r4, r6
  367 000001DA         ;save second item in the first
  368 000001DA 463D            movmi            r5, r7
  369 000001DC 4646            movmi            r6, r8
  370 000001DE         ;restore the first item
  371 000001DE BF44 461F       movmi            r7, r3
  372 000001E2 46A0            movmi            r8, r4
  373 000001E4         
  374 000001E4         ;update the array
  375 000001E4 E9C1 5600       strd             r5, r6, [r1]
  376 000001E8 E9C2 7800       strd             r7, r8, [r2]
  377 000001EC         
  378 000001EC         ;--------------------- RESTART CONDITION ---------------
                       ------
  379 000001EC         ;update restart_counter
  380 000001EC F10C 0C01       add              r12, #1
  381 000001F0         ;check if restart
  382 000001F0 4584            cmp              r12, r0
  383 000001F2         ;yes -> restart
  384 000001F2 D0E1            beq              restart_qua
  385 000001F4         ;no -> update window
  386 000001F4 F101 0108       add              r1, r1, #8
  387 000001F8 F102 0208       add              r2, r2, #8
  388 000001FC D1E5            bne              continue_qua
  389 000001FE         
  390 000001FE 485C    save_array_qua
                               ldr              r0, =Quantity_ordered
  391 00000200 495A            ldr              r1, =Ingredient_quantity
  392 00000202 780A            ldrb             r2, [r1]
  393 00000204 7002            strb             r2, [r0]
  394 00000206 F811 2F08       ldrb             r2, [r1, #8]!
  395 0000020A F800 2F04       strb             r2, [r0, #4]!
  396 0000020E F811 2F08       ldrb             r2, [r1, #8]!
  397 00000212 F800 2F04       strb             r2, [r0, #4]!
  398 00000216 F811 2F08       ldrb             r2, [r1, #8]!
  399 0000021A F800 2F04       strb             r2, [r0, #4]!
  400 0000021E F811 2F08       ldrb             r2, [r1, #8]!
  401 00000222 F800 2F04       strb             r2, [r0, #4]!
  402 00000226 F811 2F08       ldrb             r2, [r1, #8]!
  403 0000022A F800 2F04       strb             r2, [r0, #4]!
  404 0000022E         
  405 0000022E E7FF            b                most_cal
  406 00000230         
  407 00000230 F04F 0000 
                       most_cal
                               mov              r0, #0x0
  408 00000234 F04F 0100       mov              r1, #0x0
  409 00000238 F04F 0200       mov              r2, #0x0
  410 0000023C F04F 0300       mov              r3, #0x0
  411 00000240 F04F 0400       mov              r4, #0x0
  412 00000244 F04F 0500       mov              r5, #0x0
  413 00000248 F04F 0600       mov              r6, #0x0
  414 0000024C F04F 0700       mov              r7, #0x0
  415 00000250 F04F 0800       mov              r8, #0x0
  416 00000254 F04F 0900       mov              r9, #0x0
  417 00000258 F04F 0A00       mov              r10, #0x0
  418 0000025C F04F 0B00       mov              r11, #0x0



ARM Macro Assembler    Page 11 


  419 00000260 F04F 0C00       mov              r12, #0x0
  420 00000264         
  421 00000264 4843            ldr              r0, =Most_caloric_array
  422 00000266 493D            LDR              r1, =Ingredient_calories
  423 00000268 4A40            ldr              R2, =Ingredient_quantity
  424 0000026A         
  425 0000026A F04F 0A00       mov              r10, #0x0   ; exit condition
  426 0000026E F04F 0C06       mov              r12, #6
  427 00000272         
  428 00000272 45E2    loop    CMP              r10, r12    ; exit?
  429 00000274 D013            beq              search_max
  430 00000276         
  431 00000276 E9D1 4500       ldrd             r4, r5, [r1]
  432 0000027A E9D2 6700       ldrd             r6, r7, [r2]
  433 0000027E         
  434 0000027E 42B4            CMP              r4, r6      ; compare the label
                                                            s
  435 00000280         
  436 00000280 BF01 FB05 
              F807             muleq            r8, r5, r7  ;multiply 
  437 00000286 E9C0 4800       strdeq           r4, r8, [r0] ;store into the ar
                                                            ray
  438 0000028A 3008            addeq            r0, #8      ; increment the pro
                                                            duct array
  439 0000028C 3108            addeq            r1, r1, #8  ; go ahead on the f
                                                            irst array
  440 0000028E BF04 4A36       ldreq            r2, =Ingredient_quantity ; rese
                                                            t the pointer to th
                                                            e second array
  441 00000292 F10A 0A01       addeq            r10, r10, #1 ; update the itera
                                                            tion number
  442 00000296 D0EC            beq              loop
  443 00000298         
  444 00000298 BF18 3208       addne            r2, r2, #8  ; go ahead on the s
                                                            econd array
  445 0000029C D1E9            bne              loop
  446 0000029E         
  447 0000029E         
  448 0000029E F04F 0000 
                       search_max
                               mov              r0, #0x0
  449 000002A2 F04F 0100       mov              r1, #0x0
  450 000002A6 F04F 0200       mov              r2, #0x0
  451 000002AA F04F 0300       mov              r3, #0x0
  452 000002AE F04F 0400       mov              r4, #0x0
  453 000002B2 F04F 0500       mov              r5, #0x0
  454 000002B6 F04F 0600       mov              r6, #0x0
  455 000002BA F04F 0700       mov              r7, #0x0
  456 000002BE F04F 0800       mov              r8, #0x0
  457 000002C2 F04F 0900       mov              r9, #0x0
  458 000002C6 F04F 0A00       mov              r10, #0x0
  459 000002CA F04F 0B00       mov              r11, #0x0
  460 000002CE F04F 0C00       mov              r12, #0x0
  461 000002D2         
  462 000002D2         ;--------------------- REGISTER INITIALIZZATION --------
                       -------------
  463 000002D2         
  464 000002D2         ;obtain the maximum size of the array
  465 000002D2 4823            LDR              r0, =Num_ingredients



ARM Macro Assembler    Page 12 


  466 000002D4 F890 C000       ldrb             r12, [r0]
  467 000002D8 F04F 0000       mov              r0, #0x0
  468 000002DC         
  469 000002DC 4925            LDR              r1, =Most_caloric_array ;pointe
                                                            r to the first elem
                                                            ent of the window
  470 000002DE F101 0208       add              r2, r1, #8  ;pointer to the sec
                                                            ond element of the 
                                                            window
  471 000002E2         
  472 000002E2         ;r3 temp label 
  473 000002E2         ;r4 temp value
  474 000002E2         
  475 000002E2         ;r5 reserved
  476 000002E2         ;r6 reserved
  477 000002E2         ;r7 reserved
  478 000002E2         ;r8 reserved
  479 000002E2         
  480 000002E2 F04F 0B06       mov              r11, #0x6   ;exit condition
  481 000002E6 F04F 0C00       mov              r12, #0x0   ;swap counter
  482 000002EA 4658            mov              r0, r11     ;maximum swap per i
                                                            teration
  483 000002EC         
  484 000002EC         
  485 000002EC         restart_max                          ;how many swaps at 
                                                            this iteration?
  486 000002EC F1A0 0001       sub              r0, r0, #1
  487 000002F0         
  488 000002F0         ;exit contition
  489 000002F0 2800            cmp              r0, #0
  490 000002F2 D01E            beq              save_max
  491 000002F4         
  492 000002F4         ;point to the start of the array again
  493 000002F4 491F            LDR              r1, =Most_caloric_array
  494 000002F6 F101 0208       add              r2, r1, #8
  495 000002FA         
  496 000002FA         ;reset swap counter
  497 000002FA F04F 0C00       mov              r12, #0x0
  498 000002FE         
  499 000002FE         
  500 000002FE         continue_max                         ;BUBBLE SORT IMPLEM
                                                            ENTATION
  501 000002FE         
  502 000002FE         ;--------------------- START SWAP ---------------------
  503 000002FE         ;take the i-th and the i+1-th elements
  504 000002FE E9D1 5600       ldrd             r5, r6, [r1]
  505 00000302 E9D2 7800       ldrd             r7, r8, [r2]
  506 00000306         
  507 00000306         ;check if maximum
  508 00000306 4546            cmp              r6, r8
  509 00000308         
  510 00000308         ;r6 < r8 -> N=1 -> swap
  511 00000308         ;save first item of the window in a temporary register
  512 00000308 BF41 462B       movmi            r3, r5
  513 0000030C 4634            movmi            r4, r6
  514 0000030E         ;save second item in the first
  515 0000030E 463D            movmi            r5, r7
  516 00000310 4646            movmi            r6, r8
  517 00000312         ;restore the first item



ARM Macro Assembler    Page 13 


  518 00000312 BF44 461F       movmi            r7, r3
  519 00000316 46A0            movmi            r8, r4
  520 00000318         
  521 00000318         ;update the array
  522 00000318 E9C1 5600       strd             r5, r6, [r1]
  523 0000031C E9C2 7800       strd             r7, r8, [r2]
  524 00000320         
  525 00000320         ;--------------------- RESTART CONDITION ---------------
                       ------
  526 00000320         ;update restart_counter
  527 00000320 F10C 0C01       add              r12, #1
  528 00000324         ;check if restart
  529 00000324 4584            cmp              r12, r0
  530 00000326         ;yes -> restart
  531 00000326 D0E1            beq              restart_max
  532 00000328         ;no -> update window
  533 00000328 F101 0108       add              r1, r1, #8
  534 0000032C F102 0208       add              r2, r2, #8
  535 00000330 D1E5            bne              continue_max
  536 00000332         
  537 00000332 F8DF 8040 
                       save_max
                               ldr              r8, =Most_caloric_array
  538 00000336 E9D8 9A00       ldrd             r9, r10, [r8]
  539 0000033A 46CB            mov              r11, r9
  540 0000033C         
  541 0000033C 480E    stop    LDR              R0, =stop
  542 0000033E 4700            BX               R0
  543 00000340                 ENDP
  544 00000340         
  545 00000340         
  546 00000340         ; Dummy Exception Handlers (infinite loops which can be 
                       modified)
  547 00000340         
  548 00000340         NMI_Handler
                               PROC
  549 00000340                 EXPORT           NMI_Handler               [WEAK
]
  550 00000340 E7FE            B                .
  551 00000342                 ENDP
  553 00000342         HardFault_Handler
                               PROC
  554 00000342                 EXPORT           HardFault_Handler         [WEAK
]
  555 00000342         ; your code
  556 00000342 F040 0001       orr              r0,r0,#1
  557 00000346 4700            BX               r0
  558 00000348                 ENDP
  560 00000348         MemManage_Handler
                               PROC
  561 00000348                 EXPORT           MemManage_Handler         [WEAK
]
  562 00000348 E7FE            B                .
  563 0000034A                 ENDP
  565 0000034A         BusFault_Handler
                               PROC
  566 0000034A                 EXPORT           BusFault_Handler          [WEAK
]
  567 0000034A E7FE            B                .



ARM Macro Assembler    Page 14 


  568 0000034C                 ENDP
  570 0000034C         UsageFault_Handler
                               PROC
  571 0000034C                 EXPORT           UsageFault_Handler        [WEAK
]
  572 0000034C E7FE            B                .
  573 0000034E                 ENDP
  574 0000034E         SVC_Handler
                               PROC
  575 0000034E                 EXPORT           SVC_Handler               [WEAK
]
  576 0000034E E7FE            B                .
  577 00000350                 ENDP
  579 00000350         DebugMon_Handler
                               PROC
  580 00000350                 EXPORT           DebugMon_Handler          [WEAK
]
  581 00000350 E7FE            B                .
  582 00000352                 ENDP
  583 00000352         PendSV_Handler
                               PROC
  584 00000352                 EXPORT           PendSV_Handler            [WEAK
]
  585 00000352 E7FE            B                .
  586 00000354                 ENDP
  587 00000354         SysTick_Handler
                               PROC
  588 00000354                 EXPORT           SysTick_Handler           [WEAK
]
  589 00000354 E7FE            B                .
  590 00000356                 ENDP
  591 00000356         
  592 00000356         Default_Handler
                               PROC
  593 00000356         
  594 00000356                 EXPORT           WDT_IRQHandler            [WEAK
]
  595 00000356                 EXPORT           TIMER0_IRQHandler         [WEAK
]
  596 00000356                 EXPORT           TIMER1_IRQHandler         [WEAK
]
  597 00000356                 EXPORT           TIMER2_IRQHandler         [WEAK
]
  598 00000356                 EXPORT           TIMER3_IRQHandler         [WEAK
]
  599 00000356                 EXPORT           UART0_IRQHandler          [WEAK
]
  600 00000356                 EXPORT           UART1_IRQHandler          [WEAK
]
  601 00000356                 EXPORT           UART2_IRQHandler          [WEAK
]
  602 00000356                 EXPORT           UART3_IRQHandler          [WEAK
]
  603 00000356                 EXPORT           PWM1_IRQHandler           [WEAK
]
  604 00000356                 EXPORT           I2C0_IRQHandler           [WEAK
]
  605 00000356                 EXPORT           I2C1_IRQHandler           [WEAK
]



ARM Macro Assembler    Page 15 


  606 00000356                 EXPORT           I2C2_IRQHandler           [WEAK
]
  607 00000356                 EXPORT           SPI_IRQHandler            [WEAK
]
  608 00000356                 EXPORT           SSP0_IRQHandler           [WEAK
]
  609 00000356                 EXPORT           SSP1_IRQHandler           [WEAK
]
  610 00000356                 EXPORT           PLL0_IRQHandler           [WEAK
]
  611 00000356                 EXPORT           RTC_IRQHandler            [WEAK
]
  612 00000356                 EXPORT           EINT0_IRQHandler          [WEAK
]
  613 00000356                 EXPORT           EINT1_IRQHandler          [WEAK
]
  614 00000356                 EXPORT           EINT2_IRQHandler          [WEAK
]
  615 00000356                 EXPORT           EINT3_IRQHandler          [WEAK
]
  616 00000356                 EXPORT           ADC_IRQHandler            [WEAK
]
  617 00000356                 EXPORT           BOD_IRQHandler            [WEAK
]
  618 00000356                 EXPORT           USB_IRQHandler            [WEAK
]
  619 00000356                 EXPORT           CAN_IRQHandler            [WEAK
]
  620 00000356                 EXPORT           DMA_IRQHandler            [WEAK
]
  621 00000356                 EXPORT           I2S_IRQHandler            [WEAK
]
  622 00000356                 EXPORT           ENET_IRQHandler           [WEAK
]
  623 00000356                 EXPORT           RIT_IRQHandler            [WEAK
]
  624 00000356                 EXPORT           MCPWM_IRQHandler          [WEAK
]
  625 00000356                 EXPORT           QEI_IRQHandler            [WEAK
]
  626 00000356                 EXPORT           PLL1_IRQHandler           [WEAK
]
  627 00000356                 EXPORT           USBActivity_IRQHandler    [WEAK
]
  628 00000356                 EXPORT           CANActivity_IRQHandler    [WEAK
]
  629 00000356         
  630 00000356         WDT_IRQHandler
  631 00000356         TIMER0_IRQHandler
  632 00000356         TIMER1_IRQHandler
  633 00000356         TIMER2_IRQHandler
  634 00000356         TIMER3_IRQHandler
  635 00000356         UART0_IRQHandler
  636 00000356         UART1_IRQHandler
  637 00000356         UART2_IRQHandler
  638 00000356         UART3_IRQHandler
  639 00000356         PWM1_IRQHandler
  640 00000356         I2C0_IRQHandler
  641 00000356         I2C1_IRQHandler



ARM Macro Assembler    Page 16 


  642 00000356         I2C2_IRQHandler
  643 00000356         SPI_IRQHandler
  644 00000356         SSP0_IRQHandler
  645 00000356         SSP1_IRQHandler
  646 00000356         PLL0_IRQHandler
  647 00000356         RTC_IRQHandler
  648 00000356         EINT0_IRQHandler
  649 00000356         EINT1_IRQHandler
  650 00000356         EINT2_IRQHandler
  651 00000356         EINT3_IRQHandler
  652 00000356         ADC_IRQHandler
  653 00000356         BOD_IRQHandler
  654 00000356         USB_IRQHandler
  655 00000356         CAN_IRQHandler
  656 00000356         DMA_IRQHandler
  657 00000356         I2S_IRQHandler
  658 00000356         ENET_IRQHandler
  659 00000356         RIT_IRQHandler
  660 00000356         MCPWM_IRQHandler
  661 00000356         QEI_IRQHandler
  662 00000356         PLL1_IRQHandler
  663 00000356         USBActivity_IRQHandler
  664 00000356         CANActivity_IRQHandler
  665 00000356         
  666 00000356 E7FE            B                .
  667 00000358         
  668 00000358                 ENDP
  669 00000358         
  670 00000358         
  671 00000358                 ALIGN
  672 00000358         
  673 00000358         
  674 00000358         ; User Initial Stack & Heap
  675 00000358         
  676 00000358                 EXPORT           __initial_sp
  677 00000358                 EXPORT           __heap_base
  678 00000358                 EXPORT           __heap_limit
  679 00000358         
  680 00000358                 END
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\startup.d -o.\startup.o -I.\RTE\_Target_1 -IC:\Users\Kevin\AppDa
ta\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Kevin\AppData\
Local\Arm\Packs\Keil\LPC1700_DFP\2.7.1\Device\Include --predefine="__EVAL SETA 
1" --predefine="__UVISION_VERSION SETA 537" --predefine="_RTE_ SETA 1" --predef
ine="LPC175x_6x SETA 1" --predefine="_RTE_ SETA 1" --list=.\startup.lst startup
.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

STACK 00000000

Symbol: STACK
   Definitions
      At line 33 in file startup.s
   Uses
      None
Comment: STACK unused
Stack_Mem 00000000

Symbol: Stack_Mem
   Definitions
      At line 34 in file startup.s
   Uses
      None
Comment: Stack_Mem unused
__initial_sp 00000200

Symbol: __initial_sp
   Definitions
      At line 35 in file startup.s
   Uses
      At line 59 in file startup.s
      At line 676 in file startup.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

HEAP 00000000

Symbol: HEAP
   Definitions
      At line 44 in file startup.s
   Uses
      None
Comment: HEAP unused
Heap_Mem 00000000

Symbol: Heap_Mem
   Definitions
      At line 46 in file startup.s
   Uses
      None
Comment: Heap_Mem unused
__heap_base 00000000

Symbol: __heap_base
   Definitions
      At line 45 in file startup.s
   Uses
      At line 677 in file startup.s
Comment: __heap_base used once
__heap_limit 00000200

Symbol: __heap_limit
   Definitions
      At line 47 in file startup.s
   Uses
      At line 678 in file startup.s
Comment: __heap_limit used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 56 in file startup.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 59 in file startup.s
   Uses
      At line 57 in file startup.s
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.ARM.__at_0x02FC 00000000

Symbol: .ARM.__at_0x02FC
   Definitions
      At line 115 in file startup.s
   Uses
      None
Comment: .ARM.__at_0x02FC unused
CRP_Key 00000000

Symbol: CRP_Key
   Definitions
      At line 116 in file startup.s
   Uses
      None
Comment: CRP_Key unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Ingredient_calories_original 00000000

Symbol: Ingredient_calories_original
   Definitions
      At line 120 in file startup.s
   Uses
      At line 148 in file startup.s
Comment: Ingredient_calories_original used once
Ingredient_quantity_original 00000030

Symbol: Ingredient_quantity_original
   Definitions
      At line 123 in file startup.s
   Uses
      At line 273 in file startup.s
Comment: Ingredient_quantity_original used once
Num_ingredients 00000060

Symbol: Num_ingredients
   Definitions
      At line 126 in file startup.s
   Uses
      At line 184 in file startup.s
      At line 318 in file startup.s
      At line 465 in file startup.s

static_data 00000000

Symbol: static_data
   Definitions
      At line 119 in file startup.s
   Uses
      None
Comment: static_data unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Calories_ordered 00000060

Symbol: Calories_ordered
   Definitions
      At line 134 in file startup.s
   Uses
      At line 256 in file startup.s
Comment: Calories_ordered used once
Ingredient_calories 00000000

Symbol: Ingredient_calories
   Definitions
      At line 130 in file startup.s
   Uses
      At line 149 in file startup.s
      At line 188 in file startup.s
      At line 212 in file startup.s
      At line 257 in file startup.s
      At line 422 in file startup.s

Ingredient_quantity 00000030

Symbol: Ingredient_quantity
   Definitions
      At line 132 in file startup.s
   Uses
      At line 274 in file startup.s
      At line 322 in file startup.s
      At line 346 in file startup.s
      At line 391 in file startup.s
      At line 423 in file startup.s
      At line 440 in file startup.s

Most_caloric_array 00000090

Symbol: Most_caloric_array
   Definitions
      At line 138 in file startup.s
   Uses
      At line 421 in file startup.s
      At line 469 in file startup.s
      At line 493 in file startup.s
      At line 537 in file startup.s

Quantity_ordered 00000078

Symbol: Quantity_ordered
   Definitions
      At line 136 in file startup.s
   Uses
      At line 390 in file startup.s
Comment: Quantity_ordered used once
dynamic_data 00000000

Symbol: dynamic_data
   Definitions
      At line 128 in file startup.s
   Uses
      None



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: dynamic_data unused
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 142 in file startup.s
   Uses
      None
Comment: .text unused
ADC_IRQHandler 00000356

Symbol: ADC_IRQHandler
   Definitions
      At line 652 in file startup.s
   Uses
      At line 99 in file startup.s
      At line 616 in file startup.s

BOD_IRQHandler 00000356

Symbol: BOD_IRQHandler
   Definitions
      At line 653 in file startup.s
   Uses
      At line 100 in file startup.s
      At line 617 in file startup.s

BusFault_Handler 0000034A

Symbol: BusFault_Handler
   Definitions
      At line 565 in file startup.s
   Uses
      At line 64 in file startup.s
      At line 566 in file startup.s

CANActivity_IRQHandler 00000356

Symbol: CANActivity_IRQHandler
   Definitions
      At line 664 in file startup.s
   Uses
      At line 111 in file startup.s
      At line 628 in file startup.s

CAN_IRQHandler 00000356

Symbol: CAN_IRQHandler
   Definitions
      At line 655 in file startup.s
   Uses
      At line 102 in file startup.s
      At line 619 in file startup.s

DMA_IRQHandler 00000356

Symbol: DMA_IRQHandler
   Definitions
      At line 656 in file startup.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 103 in file startup.s
      At line 620 in file startup.s

DebugMon_Handler 00000350

Symbol: DebugMon_Handler
   Definitions
      At line 579 in file startup.s
   Uses
      At line 71 in file startup.s
      At line 580 in file startup.s

Default_Handler 00000356

Symbol: Default_Handler
   Definitions
      At line 592 in file startup.s
   Uses
      None
Comment: Default_Handler unused
EINT0_IRQHandler 00000356

Symbol: EINT0_IRQHandler
   Definitions
      At line 648 in file startup.s
   Uses
      At line 95 in file startup.s
      At line 612 in file startup.s

EINT1_IRQHandler 00000356

Symbol: EINT1_IRQHandler
   Definitions
      At line 649 in file startup.s
   Uses
      At line 96 in file startup.s
      At line 613 in file startup.s

EINT2_IRQHandler 00000356

Symbol: EINT2_IRQHandler
   Definitions
      At line 650 in file startup.s
   Uses
      At line 97 in file startup.s
      At line 614 in file startup.s

EINT3_IRQHandler 00000356

Symbol: EINT3_IRQHandler
   Definitions
      At line 651 in file startup.s
   Uses
      At line 98 in file startup.s
      At line 615 in file startup.s

ENET_IRQHandler 00000356

Symbol: ENET_IRQHandler



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 658 in file startup.s
   Uses
      At line 105 in file startup.s
      At line 622 in file startup.s

HardFault_Handler 00000342

Symbol: HardFault_Handler
   Definitions
      At line 553 in file startup.s
   Uses
      At line 62 in file startup.s
      At line 554 in file startup.s

I2C0_IRQHandler 00000356

Symbol: I2C0_IRQHandler
   Definitions
      At line 640 in file startup.s
   Uses
      At line 87 in file startup.s
      At line 604 in file startup.s

I2C1_IRQHandler 00000356

Symbol: I2C1_IRQHandler
   Definitions
      At line 641 in file startup.s
   Uses
      At line 88 in file startup.s
      At line 605 in file startup.s

I2C2_IRQHandler 00000356

Symbol: I2C2_IRQHandler
   Definitions
      At line 642 in file startup.s
   Uses
      At line 89 in file startup.s
      At line 606 in file startup.s

I2S_IRQHandler 00000356

Symbol: I2S_IRQHandler
   Definitions
      At line 657 in file startup.s
   Uses
      At line 104 in file startup.s
      At line 621 in file startup.s

MCPWM_IRQHandler 00000356

Symbol: MCPWM_IRQHandler
   Definitions
      At line 660 in file startup.s
   Uses
      At line 107 in file startup.s
      At line 624 in file startup.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


MemManage_Handler 00000348

Symbol: MemManage_Handler
   Definitions
      At line 560 in file startup.s
   Uses
      At line 63 in file startup.s
      At line 561 in file startup.s

NMI_Handler 00000340

Symbol: NMI_Handler
   Definitions
      At line 548 in file startup.s
   Uses
      At line 61 in file startup.s
      At line 549 in file startup.s

PLL0_IRQHandler 00000356

Symbol: PLL0_IRQHandler
   Definitions
      At line 646 in file startup.s
   Uses
      At line 93 in file startup.s
      At line 610 in file startup.s

PLL1_IRQHandler 00000356

Symbol: PLL1_IRQHandler
   Definitions
      At line 662 in file startup.s
   Uses
      At line 109 in file startup.s
      At line 626 in file startup.s

PWM1_IRQHandler 00000356

Symbol: PWM1_IRQHandler
   Definitions
      At line 639 in file startup.s
   Uses
      At line 86 in file startup.s
      At line 603 in file startup.s

PendSV_Handler 00000352

Symbol: PendSV_Handler
   Definitions
      At line 583 in file startup.s
   Uses
      At line 73 in file startup.s
      At line 584 in file startup.s

QEI_IRQHandler 00000356

Symbol: QEI_IRQHandler
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 661 in file startup.s
   Uses
      At line 108 in file startup.s
      At line 625 in file startup.s

RIT_IRQHandler 00000356

Symbol: RIT_IRQHandler
   Definitions
      At line 659 in file startup.s
   Uses
      At line 106 in file startup.s
      At line 623 in file startup.s

RTC_IRQHandler 00000356

Symbol: RTC_IRQHandler
   Definitions
      At line 647 in file startup.s
   Uses
      At line 94 in file startup.s
      At line 611 in file startup.s

Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 144 in file startup.s
   Uses
      At line 60 in file startup.s
      At line 145 in file startup.s

SPI_IRQHandler 00000356

Symbol: SPI_IRQHandler
   Definitions
      At line 643 in file startup.s
   Uses
      At line 90 in file startup.s
      At line 607 in file startup.s

SSP0_IRQHandler 00000356

Symbol: SSP0_IRQHandler
   Definitions
      At line 644 in file startup.s
   Uses
      At line 91 in file startup.s
      At line 608 in file startup.s

SSP1_IRQHandler 00000356

Symbol: SSP1_IRQHandler
   Definitions
      At line 645 in file startup.s
   Uses
      At line 92 in file startup.s
      At line 609 in file startup.s




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

SVC_Handler 0000034E

Symbol: SVC_Handler
   Definitions
      At line 574 in file startup.s
   Uses
      At line 70 in file startup.s
      At line 575 in file startup.s

SysTick_Handler 00000354

Symbol: SysTick_Handler
   Definitions
      At line 587 in file startup.s
   Uses
      At line 74 in file startup.s
      At line 588 in file startup.s

TIMER0_IRQHandler 00000356

Symbol: TIMER0_IRQHandler
   Definitions
      At line 631 in file startup.s
   Uses
      At line 78 in file startup.s
      At line 595 in file startup.s

TIMER1_IRQHandler 00000356

Symbol: TIMER1_IRQHandler
   Definitions
      At line 632 in file startup.s
   Uses
      At line 79 in file startup.s
      At line 596 in file startup.s

TIMER2_IRQHandler 00000356

Symbol: TIMER2_IRQHandler
   Definitions
      At line 633 in file startup.s
   Uses
      At line 80 in file startup.s
      At line 597 in file startup.s

TIMER3_IRQHandler 00000356

Symbol: TIMER3_IRQHandler
   Definitions
      At line 634 in file startup.s
   Uses
      At line 81 in file startup.s
      At line 598 in file startup.s

UART0_IRQHandler 00000356

Symbol: UART0_IRQHandler
   Definitions
      At line 635 in file startup.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 82 in file startup.s
      At line 599 in file startup.s

UART1_IRQHandler 00000356

Symbol: UART1_IRQHandler
   Definitions
      At line 636 in file startup.s
   Uses
      At line 83 in file startup.s
      At line 600 in file startup.s

UART2_IRQHandler 00000356

Symbol: UART2_IRQHandler
   Definitions
      At line 637 in file startup.s
   Uses
      At line 84 in file startup.s
      At line 601 in file startup.s

UART3_IRQHandler 00000356

Symbol: UART3_IRQHandler
   Definitions
      At line 638 in file startup.s
   Uses
      At line 85 in file startup.s
      At line 602 in file startup.s

USBActivity_IRQHandler 00000356

Symbol: USBActivity_IRQHandler
   Definitions
      At line 663 in file startup.s
   Uses
      At line 110 in file startup.s
      At line 627 in file startup.s

USB_IRQHandler 00000356

Symbol: USB_IRQHandler
   Definitions
      At line 654 in file startup.s
   Uses
      At line 101 in file startup.s
      At line 618 in file startup.s

UsageFault_Handler 0000034C

Symbol: UsageFault_Handler
   Definitions
      At line 570 in file startup.s
   Uses
      At line 65 in file startup.s
      At line 571 in file startup.s

WDT_IRQHandler 00000356



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols


Symbol: WDT_IRQHandler
   Definitions
      At line 630 in file startup.s
   Uses
      At line 77 in file startup.s
      At line 594 in file startup.s

continue_cal 000000A0

Symbol: continue_cal
   Definitions
      At line 219 in file startup.s
   Uses
      At line 254 in file startup.s
Comment: continue_cal used once
continue_max 000002FE

Symbol: continue_max
   Definitions
      At line 500 in file startup.s
   Uses
      At line 535 in file startup.s
Comment: continue_max used once
continue_qua 000001CA

Symbol: continue_qua
   Definitions
      At line 353 in file startup.s
   Uses
      At line 388 in file startup.s
Comment: continue_qua used once
loop 00000272

Symbol: loop
   Definitions
      At line 428 in file startup.s
   Uses
      At line 442 in file startup.s
      At line 445 in file startup.s

most_cal 00000230

Symbol: most_cal
   Definitions
      At line 407 in file startup.s
   Uses
      At line 405 in file startup.s
Comment: most_cal used once
next_step 00000106

Symbol: next_step
   Definitions
      At line 273 in file startup.s
   Uses
      At line 271 in file startup.s
Comment: next_step used once
restart_cal 0000008E




ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols

Symbol: restart_cal
   Definitions
      At line 204 in file startup.s
   Uses
      At line 250 in file startup.s
Comment: restart_cal used once
restart_max 000002EC

Symbol: restart_max
   Definitions
      At line 485 in file startup.s
   Uses
      At line 531 in file startup.s
Comment: restart_max used once
restart_qua 000001B8

Symbol: restart_qua
   Definitions
      At line 338 in file startup.s
   Uses
      At line 384 in file startup.s
Comment: restart_qua used once
save_array_cal 000000D4

Symbol: save_array_cal
   Definitions
      At line 256 in file startup.s
   Uses
      At line 209 in file startup.s
Comment: save_array_cal used once
save_array_qua 000001FE

Symbol: save_array_qua
   Definitions
      At line 390 in file startup.s
   Uses
      At line 343 in file startup.s
Comment: save_array_qua used once
save_max 00000332

Symbol: save_max
   Definitions
      At line 537 in file startup.s
   Uses
      At line 490 in file startup.s
Comment: save_max used once
search_max 0000029E

Symbol: search_max
   Definitions
      At line 448 in file startup.s
   Uses
      At line 429 in file startup.s
Comment: search_max used once
stop 0000033C

Symbol: stop
   Definitions
      At line 541 in file startup.s



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 541 in file startup.s
Comment: stop used once
61 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Heap_Size 00000200

Symbol: Heap_Size
   Definitions
      At line 42 in file startup.s
   Uses
      At line 46 in file startup.s
Comment: Heap_Size used once
Stack_Size 00000200

Symbol: Stack_Size
   Definitions
      At line 31 in file startup.s
   Uses
      At line 34 in file startup.s
Comment: Stack_Size used once
2 symbols
422 symbols in table
